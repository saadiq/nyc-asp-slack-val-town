#!/usr/bin/env bun
/**
 * Build script to bundle NYC ASP Bot for Val Town deployment
 *
 * This script:
 * 1. Reads all TypeScript source files from src/
 * 2. Transforms imports to use npm: syntax for Val Town
 * 3. Bundles everything into a single file at nyc-asp-val/index.ts
 * 4. Ensures the file is under Val Town's 80KB limit
 */

import { readFile, writeFile, mkdir } from 'fs/promises';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const ROOT_DIR = join(__dirname, '..');
const SRC_DIR = join(ROOT_DIR, 'src');
const OUTPUT_DIR = join(ROOT_DIR, 'nyc-asp-val');
const OUTPUT_FILE = join(OUTPUT_DIR, 'index.ts');

// Map of source files in dependency order (bottom-up)
const SOURCE_FILES = [
  'types.ts',
  'utils/date-utils.ts',
  'utils/retry.ts',
  'calendar/ics-fetcher.ts',
  'calendar/ics-parser.ts',
  'scraper/nyc-website.ts',
  'parking-logic/suspension-checker.ts',
  'parking-logic/week-analyzer.ts',
  'parking-logic/move-decision.ts',
  'slack/message-builder.ts',
  'slack/webhook.ts',
  'config.ts',
  'main.ts',
];

// Dependencies to convert to npm: imports
const NPM_DEPENDENCIES = {
  'date-fns': '3.0.0',
  'date-fns-tz': '3.0.0',
  'ical.js': '2.0.0',
  'linkedom': '0.18.0',
};

async function buildValTownBundle() {
  console.log('üì¶ Building Val Town bundle...\n');

  // Ensure output directory exists
  await mkdir(OUTPUT_DIR, { recursive: true });

  const sections: string[] = [];

  // Add header
  sections.push(`/**
 * NYC ASP Bot - Val Town Entry Point
 *
 * Auto-generated from src/ by scripts/build-val.ts
 * DO NOT EDIT THIS FILE DIRECTLY - Edit source files in src/ instead
 *
 * IMPORTANT: Cron Schedule Configuration
 * ======================================
 * This val should run with cron schedule: 10 * * * *
 * (every hour at 10 minutes past the hour)
 *
 * ‚ö†Ô∏è  WARNING: Val Town deployments may reset your cron schedule!
 * After deploying, verify the schedule is set correctly:
 * 1. Go to your val in the Val Town UI
 * 2. Check the cron schedule in the top right corner
 * 3. Set to: 10 * * * * (if not already set)
 *
 * Or use the helper script to set it programmatically:
 *    bun run set-schedule
 *
 * Environment Variables Required:
 * - SLACK_WEBHOOK_URL: Your Slack webhook URL
 * - NEAR_SIDE_DAYS: Days for near side cleaning (e.g., "Mon,Thu")
 * - FAR_SIDE_DAYS: Days for far side cleaning (e.g., "Tue,Fri")
 *
 * Optional Environment Variables:
 * - CLEANING_START_TIME: Start time for cleaning (default: "09:00")
 * - CLEANING_END_TIME: End time for cleaning (default: "10:30")
 * - NEAR_SIDE_EMOJI: Emoji for near side (default: "üè°")
 * - FAR_SIDE_EMOJI: Emoji for far side (default: "üå≥")
 */
`);

  // Collect all imports from source files
  const externalImports = new Set<string>();
  const processedSources: string[] = [];

  for (const file of SOURCE_FILES) {
    const filePath = join(SRC_DIR, file);
    console.log(`  Processing ${file}...`);

    let content = await readFile(filePath, 'utf-8');

    // Extract and collect external imports
    const importRegex = /^import\s+(?:{[^}]+}|\*\s+as\s+\w+|\w+)\s+from\s+['"]([^'"]+)['"]/gm;
    let match;

    while ((match = importRegex.exec(content)) !== null) {
      const importPath = match[1];

      // If it's an external package (not a relative import)
      if (!importPath.startsWith('.')) {
        externalImports.add(match[0]);
      }
    }

    // Remove all import statements (handles both single-line and multi-line imports)
    // First, handle multi-line imports by collapsing them
    content = content.replace(/import\s+{[^}]+}\s+from\s+['"][^'"]+['"];?/g, '');
    content = content.replace(/import\s+\*\s+as\s+\w+\s+from\s+['"][^'"]+['"];?/g, '');
    content = content.replace(/import\s+\w+\s+from\s+['"][^'"]+['"];?/g, '');
    // Then clean up any remaining import lines
    content = content.replace(/^import\s+.+$/gm, '');

    // Remove export keywords but keep the declarations
    content = content.replace(/^export\s+(type|interface|const|function|async function|class)/gm, '$1');
    content = content.replace(/^export\s+{[^}]+};?\s*$/gm, '');
    content = content.replace(/^export\s+default\s+/gm, '');

    // Remove comments that are just file path markers
    content = content.replace(/^\/\/\s*src\/.+$/gm, '');

    // Clean up extra blank lines
    content = content.replace(/\n{3,}/g, '\n\n');
    content = content.trim();

    processedSources.push(content);
  }

  // Add external imports with npm: syntax
  sections.push('// ============================================================================');
  sections.push('// EXTERNAL DEPENDENCIES');
  sections.push('// ============================================================================\n');

  for (const importStatement of Array.from(externalImports).sort()) {
    let transformed = importStatement;

    // Transform package imports to npm: syntax
    for (const [pkg, version] of Object.entries(NPM_DEPENDENCIES)) {
      if (importStatement.includes(`from '${pkg}`)) {
        transformed = importStatement.replace(`from '${pkg}`, `from 'npm:${pkg}@${version}`);
        transformed = transformed.replace(`from "${pkg}`, `from "npm:${pkg}@${version}`);
      }
    }

    sections.push(transformed);
  }

  sections.push('');

  // Add all processed source code
  sections.push('// ============================================================================');
  sections.push('// APPLICATION CODE');
  sections.push('// ============================================================================\n');
  sections.push(processedSources.join('\n\n'));

  // Add default export at the end
  sections.push('\n// Export main function as default for Val Town');
  sections.push('export default main;');

  // Combine all sections
  const output = sections.join('\n');

  // Write output
  await writeFile(OUTPUT_FILE, output, 'utf-8');

  // Check file size
  const fileSize = Buffer.byteLength(output, 'utf-8');
  const fileSizeKB = (fileSize / 1024).toFixed(2);
  const VAL_TOWN_LIMIT = 80000;

  console.log('\n‚úÖ Build complete!');
  console.log(`   Output: ${OUTPUT_FILE}`);
  console.log(`   Size: ${fileSize} bytes (${fileSizeKB}KB)`);
  console.log(`   Val Town limit: ${VAL_TOWN_LIMIT} bytes (80KB)`);

  if (fileSize > VAL_TOWN_LIMIT) {
    console.error('\n‚ùå ERROR: File exceeds Val Town\'s 80KB limit!');
    process.exit(1);
  } else {
    const percentUsed = ((fileSize / VAL_TOWN_LIMIT) * 100).toFixed(1);
    console.log(`   Limit usage: ${percentUsed}%`);
  }

  // Generate Val-specific README
  await generateValReadme();

  console.log('\nüìù Next steps:');
  console.log('   cd nyc-asp-val && vt push');
  console.log('\n‚ö†Ô∏è  IMPORTANT: After deploying, verify cron schedule!');
  console.log('   Expected schedule: 10 * * * * (every hour at :10)');
  console.log('   Run: bun run set-schedule');
  console.log('   Or check manually in Val Town UI');
}

async function generateValReadme() {
  const readmePath = join(OUTPUT_DIR, 'README.md');

  const readme = `# NYC ASP Parking Bot

Automated Slack notifications for NYC Alternate Side Parking strategy.

üîó **[View Source Code on GitHub](https://github.com/saadiq/nyc-asp-slack-val-town)**

## What This Val Does

This Val runs every hour and sends you strategic Slack notifications about NYC Alternate Side Parking:

- **Sunday 5 AM**: Weekly parking strategy with visual calendar
- **Mon-Thu 10 AM**: Move reminders when you need to switch sides
- **Mon-Fri 5 AM**: Emergency alerts for unexpected ASP suspensions

## Configuration

### Required Environment Variables

Set these in the Val Town UI:

- \`SLACK_WEBHOOK_URL\` - Your Slack incoming webhook URL ([create one here](https://api.slack.com/messaging/webhooks))

### Optional Environment Variables

**Cleaning Schedule:**

- \`NEAR_SIDE_DAYS\` (default: \`Mon,Thu\`) - Days when your home side has cleaning
- \`FAR_SIDE_DAYS\` (default: \`Tue,Fri\`) - Days when opposite side has cleaning
- \`CLEANING_START_TIME\` (default: \`09:00\`) - When cleaning starts
- \`CLEANING_END_TIME\` (default: \`10:30\`) - When cleaning ends
- \`NEAR_SIDE_EMOJI\` (default: \`üè°\`) - Emoji for your home side
- \`FAR_SIDE_EMOJI\` (default: \`üå≥\`) - Emoji for opposite side

**Testing/Development:**

- \`FORCE_RUN\` - Override scheduled run times for testing:
  - Leave empty/unset for normal operation
  - Set to \`move\` to force 10 AM move reminder check
  - Set to \`summary\` to force weekly summary generation
  - Set to \`emergency\` to force emergency suspension check
  - **Remove this variable for production use!**

## How It Works

1. Fetches NYC's official ASP suspension calendar (ICS)
2. Scrapes NYC DOT website for emergency suspensions
3. Analyzes your weekly parking schedule
4. Sends strategic Slack notifications at key times

## Deployment

This code is auto-generated from the [source repository](https://github.com/saadiq/nyc-asp-slack-val-town).

**Do not edit \`index.ts\` directly** - changes will be overwritten on next deployment.

To contribute or modify:
1. Clone the [GitHub repo](https://github.com/saadiq/nyc-asp-slack-val-town)
2. Edit files in \`src/\`
3. Run \`bun run deploy\` to build and push

## Schedule

‚ö†Ô∏è **IMPORTANT: Cron Schedule Configuration**

This val should run with cron schedule: **\`10 * * * *\`** (every hour at 10 minutes past the hour)

**After deploying, verify the schedule is set correctly:**

Val Town deployments may reset your cron schedule. Always check after deployment:

1. **Option 1 - Automated (Recommended)**:
   \`\`\`bash
   bun run set-schedule
   \`\`\`
   Requires \`VAL_TOWN_API_TOKEN\` in .env with "Vals: read and write" permissions.
   Create token at: https://www.val.town/settings/api

2. **Option 2 - Manual**:
   - Open your val in the Val Town UI
   - Click the cron schedule selector in the top right
   - Set to: \`10 * * * *\`

## License

MIT - See [GitHub repository](https://github.com/saadiq/nyc-asp-slack-val-town) for details
`;

  await writeFile(readmePath, readme, 'utf-8');
  console.log(`   Generated: ${readmePath}`);
}

// Run the build
buildValTownBundle().catch((error) => {
  console.error('‚ùå Build failed:', error);
  process.exit(1);
});
